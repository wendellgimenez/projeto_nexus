"""
Django settings for igla project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
# Importação de módulos necessários para o funcionamento do projeto Django e configuração de diretórios.
from pathlib import Path
from django.shortcuts import redirect
from django.contrib import messages
from django.urls import reverse_lazy

# Define o diretório base do projeto, que serve de referência para construção de caminhos internos.
BASE_DIR = Path(__file__).resolve().parent.parent


# Configurações para desenvolvimento rápido - não são adequadas para produção.
# Consulte https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/ para mais detalhes.

# Aviso de segurança: mantenha a chave secreta em sigilo para ambientes de produção!
SECRET_KEY = 'django-insecure-$)irq$g8(78ev)i(t-w)cpnya9(*t$0663c%s1n8jo_y!^w00o'

# Aviso de segurança: o modo de depuração (DEBUG) deve estar desativado em produção!
DEBUG = True

# Lista de hosts permitidos a acessar o projeto. Inclui localhost e o IP específico do servidor.
ALLOWED_HOSTS = ['localhost','127.0.0.1','0.0.0.0','34.207.225.10']

# Definição dos aplicativos instalados no projeto. Estes módulos adicionam funcionalidades ao Django.
INSTALLED_APPS = [
    'django.contrib.admin', # Painel de administração do Django
    'django.contrib.auth', # Gerenciamento de autenticação e usuários
    'django.contrib.contenttypes', # Tipos de conteúdo genéricos
    'django.contrib.sessions', # Gerenciamento de sessões
    'django.contrib.messages', # Sistema de mensagens
    'django.contrib.staticfiles', # Gerenciamento de arquivos estáticos
    'social_django', # Integração de autenticação social (ex.: login social com redes)
    'core', # Aplicativo principal do projeto
]

# Configurações de middleware. Middleware são camadas que processam requisições e respostas, adicionando funcionalidades.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware', # Reforço de segurança em conexões
    'django.contrib.sessions.middleware.SessionMiddleware', # Gerenciamento de sessões de usuário
    'django.middleware.common.CommonMiddleware', # Funcionalidades comuns para requisições e respostas
    'django.middleware.csrf.CsrfViewMiddleware', # Proteção contra ataques CSRF
    'django.contrib.auth.middleware.AuthenticationMiddleware', # Autenticação de usuários
    'django.contrib.messages.middleware.MessageMiddleware', # Sistema de mensagens
    'django.middleware.clickjacking.XFrameOptionsMiddleware', # Proteção contra "clickjacking"
    'social_django.middleware.SocialAuthExceptionMiddleware', # Tratamento de exceções para autenticação social
]

# Define o arquivo de URLs principal do projeto.
ROOT_URLCONF = 'igla.urls'

# Configuração de templates. Define diretórios de templates e processadores de contexto para uso nas views.
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates', # Usa o backend de templates padrão do Django
        'DIRS': [BASE_DIR / 'core', 'templates'],  # Define diretórios para templates externos aos apps
        'APP_DIRS': True, # Habilita a busca por templates dentro dos apps
        'OPTIONS': {
            'context_processors': [ # Processadores de contexto para adicionar variáveis de contexto aos templates
                'django.template.context_processors.debug', # Variáveis de debug
                'django.template.context_processors.request', # Variáveis da requisição
                'django.contrib.auth.context_processors.auth', # Variáveis de autenticação de usuário
                'django.contrib.messages.context_processors.messages', # Variáveis de mensagens do Django
                'social_django.context_processors.backends', # Integração com backends de autenticação social
                'social_django.context_processors.login_redirect', # URL de redirecionamento após login social
            ],
        },
    },
]

# Define os backends de autenticação utilizados. Inclui a autenticação via Azure AD Tenant e o backend padrão do Django.
AUTHENTICATION_BACKENDS = (
    'social_core.backends.azuread_tenant.AzureADTenantOAuth2', # Autenticação com Azure AD Tenant (OAuth2)
    'django.contrib.auth.backends.ModelBackend', # Backend padrão de autenticação do Django
)

# Configurações para autenticação social com Azure AD.
SOCIAL_AUTH_AZUREAD_TENANT_OAUTH2_KEY = 'd1b586b3-a0a7-4046-a17b-a8ba1b32bba2' # Client ID do Azure AD
SOCIAL_AUTH_AZUREAD_TENANT_OAUTH2_SECRET = '~Bf8Q~nneTG-lFaOQ~0utMtOWA_P8NVh~wEn1bIq' # Secret Key do Azure AD
SOCIAL_AUTH_AZUREAD_TENANT_OAUTH2_TENANT_ID = '10e45de1-ff46-4846-b7d4-a50b1701f2ca' # Tenant ID do Azure AD

# Função de depuração no pipeline social. Exibe o backend, usuário e resposta da autenticação no console para ajudar na depuração.
def debug_pipeline(backend, user, response, *args, **kwargs):
    print(f"Backend: {backend}")
    print(f"User: {user}")
    print(f"Response: {response}")
    return None

# Configuração do pipeline de autenticação social. Define as etapas do processo de autenticação, incluindo uma etapa customizada.
SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details', # Coleta detalhes do usuário social
    'social_core.pipeline.social_auth.social_uid', # Identifica o UID social do usuário
    'social_core.pipeline.social_auth.auth_allowed', # Verifica se a autenticação é permitida
    'core.pipeline.check_existing_email',  # Etapa customizada para verificar se o e-mail já existe
    'social_core.pipeline.social_auth.social_user', # Procura um usuário social correspondente
    'social_core.pipeline.user.get_username', # Define o nome de usuário do usuário
    'social_core.pipeline.social_auth.associate_user', # Associa o usuário autenticado ao usuário social
    'social_core.pipeline.social_auth.load_extra_data', # Carrega dados extras do perfil social
    'social_core.pipeline.user.user_details', # Atualiza os detalhes do usuário
)

# URL de redirecionamento após a autenticação com Azure AD para o ambiente de desenvolvimento.
SOCIAL_AUTH_AZUREAD_TENANT_OAUTH2_REDIRECT_URI = 'http://localhost:8000/complete/azuread-tenant-oauth2/'

# Campos do usuário coletados durante a autenticação social.
SOCIAL_AUTH_USER_FIELDS = ['email', 'username']

# URLs de redirecionamento para diferentes cenários de autenticação social (ex.: erro, usuário inativo).
SOCIAL_AUTH_LOGIN_ERROR_URL = reverse_lazy('login') # Redireciona para a página de login em caso de erro
SOCIAL_AUTH_NEW_USER_REDIRECT_URL = reverse_lazy('login') # Redireciona para a página de login para novos usuários
SOCIAL_AUTH_INACTIVE_USER_URL = reverse_lazy('login') # Redireciona para a página de login para usuários inativos

# Configuração da aplicação WSGI, necessária para o servidor web interagir com o Django.
WSGI_APPLICATION = 'igla.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
# Configuração do banco de dados PostgreSQL. Define os parâmetros de conexão e o schema.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql', # Motor de banco de dados PostgreSQL
        'NAME': 'postgres',  # Nome do banco de dados
        'USER': 'postgres_sa', # Nome do usuário do banco de dados
        'PASSWORD': '$72}AG49fIw3', # Senha do usuário do banco de dados
        'HOST': 'superbase.c4p9rq34tafz.sa-east-1.rds.amazonaws.com', # Host do banco de dados
        'PORT': '5432', # Porta do banco de dados
        'OPTIONS': {
            'options': '-c search_path=dados_igla' # Define o schema (search_path) para as tabelas do projeto
        },
    }
}


# Validação de senhas
# Define validadores de senha para garantir segurança nas senhas dos usuários.
# Mais detalhes: https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', # Verifica similaridade com atributos do usuário
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', # Define um tamanho mínimo para a senha
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', # Verifica se a senha é comum (evita senhas fracas)
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', # Evita senhas exclusivamente numéricas
    },
]


# Internacionalização
# Configurações para idioma e fuso horário.
# Mais detalhes: https://docs.djangoproject.com/en/5.0/topics/i18n/
LANGUAGE_CODE = 'pt-br' # Define o idioma padrão como português do Brasil
TIME_ZONE = 'America/Sao_Paulo' # Define o fuso horário padrão para São Paulo

# Ativa a tradução para o idioma configurado (True para ativado).
USE_I18N = True

# Ativa a configuração do fuso horário (True para ativado).
USE_TZ = True


# Arquivos estáticos (CSS, JavaScript, Imagens)
# Define configurações de arquivos estáticos e mídia para a aplicação.
# Mais detalhes: https://docs.djangoproject.com/en/5.0/howto/static-files/
STATIC_URL = '/static/' # URL para acessar arquivos estáticos
STATICFILES_DIRS = [BASE_DIR / 'static'] # Diretório onde estão localizados os arquivos estáticos

# Configuração para arquivos de mídia (uploads de usuário, etc.)
MEDIA_URL = '/media/' # URL para acessar arquivos de mídia
MEDIA_ROOT = BASE_DIR / 'media' # Diretório onde os arquivos de mídia são salvos

# URLs para login e logout do usuário.
LOGIN_URL = '/login/' # URL de login
LOGOUT_URL = '/logout/' # URL de logout
LOGIN_REDIRECT_URL = '/home/' # Redireciona para a página inicial após login
LOGOUT_REDIRECT_URL = '/login/' # Redireciona para a página de login após logout

# Tipo de campo padrão para chave primária
# Mais detalhes: https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuração de domínio confiável para o token CSRF (descomentado caso necessário)
# Define domínios confiáveis para CSRF, útil para ambientes de testes ou URLs específicas.
# CSRF_TRUSTED_ORIGINS = [
#     'https://c5f5-200-155-138-250.ngrok-free.app',
# ]